//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParseMessage.ParseEngine
{
	using System;
	using System.Text;
	using System.Collections;
	using Gt.ParserLibrary.Readers;
	using Gt.ParserLibrary.Tokens;
	using Gt.ParserLibrary.Writers;
	using Gt.ParserLibrary.Parser;
	using System.Collections.Generic;
	
	
	public class IrcMsgParser : IrcMsgContext
	{
		
		// ----------------------------------- Token Set -----------------------------------
		// WORD
		static int[][] @__ts_items_1 = new int[][] {
				new int[] {
						10}};
		
		// THREEDIGITS
		static int[][] @__ts_items_2 = new int[][] {
				new int[] {
						9}};
		
		// DOT
		static int[][] @__ts_items_3 = new int[][] {
				new int[] {
						6}};
		
		// SHORTNAME, WORD
		static int[][] @__ts_items_4 = new int[][] {
				new int[] {
						11},
				new int[] {
						10}};
		
		// SLASH
		static int[][] @__ts_items_5 = new int[][] {
				new int[] {
						7}};
		
		// COLON
		static int[][] @__ts_items_6 = new int[][] {
				new int[] {
						1}};
		
		// SPACE
		static int[][] @__ts_items_7 = new int[][] {
				new int[] {
						0}};
		
		// CR
		static int[][] @__ts_items_8 = new int[][] {
				new int[] {
						4}};
		
		// LF
		static int[][] @__ts_items_9 = new int[][] {
				new int[] {
						5}};
		
		// COLON, THREEDIGITS, WORD
		static int[][] @__ts_items_10 = new int[][] {
				new int[] {
						1},
				new int[] {
						9},
				new int[] {
						10}};
		
		// AT, BANG, COLON, CONTROLS, DIGITS, DOT, EXTRAS, NICKNAME, OTHERS, SHORTNAME, SLASH, SPECIALS, SYMBOLS, THREEDIGITS, WORD
		static int[][] @__ts_items_11 = new int[][] {
				new int[] {
						2},
				new int[] {
						3},
				new int[] {
						1},
				new int[] {
						14},
				new int[] {
						8},
				new int[] {
						6},
				new int[] {
						17},
				new int[] {
						12},
				new int[] {
						16},
				new int[] {
						11},
				new int[] {
						7},
				new int[] {
						13},
				new int[] {
						15},
				new int[] {
						9},
				new int[] {
						10}};
		
		// AT, BANG, CONTROLS, DIGITS, DOT, EXTRAS, NICKNAME, OTHERS, SHORTNAME, SLASH, SPECIALS, SYMBOLS, THREEDIGITS, WORD
		static int[][] @__ts_items_12 = new int[][] {
				new int[] {
						2},
				new int[] {
						3},
				new int[] {
						14},
				new int[] {
						8},
				new int[] {
						6},
				new int[] {
						17},
				new int[] {
						12},
				new int[] {
						16},
				new int[] {
						11},
				new int[] {
						7},
				new int[] {
						13},
				new int[] {
						15},
				new int[] {
						9},
				new int[] {
						10}};
		
		// DIGITS
		static int[][] @__ts_items_13 = new int[][] {
				new int[] {
						8}};
		
		// SHORTNAME
		static int[][] @__ts_items_14 = new int[][] {
				new int[] {
						11}};
		
		// NICKNAME
		static int[][] @__ts_items_15 = new int[][] {
				new int[] {
						12}};
		
		// SPECIALS
		static int[][] @__ts_items_16 = new int[][] {
				new int[] {
						13}};
		
		// CONTROLS
		static int[][] @__ts_items_17 = new int[][] {
				new int[] {
						14}};
		
		// SYMBOLS
		static int[][] @__ts_items_18 = new int[][] {
				new int[] {
						15}};
		
		// OTHERS
		static int[][] @__ts_items_19 = new int[][] {
				new int[] {
						16}};
		
		// EXTRAS
		static int[][] @__ts_items_20 = new int[][] {
				new int[] {
						17}};
		
		// AT
		static int[][] @__ts_items_21 = new int[][] {
				new int[] {
						2}};
		
		// BANG
		static int[][] @__ts_items_22 = new int[][] {
				new int[] {
						3}};
		
		// AT, BANG, COLON, CONTROLS, DIGITS, DOT, EXTRAS, NICKNAME, OTHERS, SHORTNAME, SLASH, SPACE, SPECIALS, SYMBOLS, THREEDIGITS, WORD
		static int[][] @__ts_items_23 = new int[][] {
				new int[] {
						2},
				new int[] {
						3},
				new int[] {
						1},
				new int[] {
						14},
				new int[] {
						8},
				new int[] {
						6},
				new int[] {
						17},
				new int[] {
						12},
				new int[] {
						16},
				new int[] {
						11},
				new int[] {
						7},
				new int[] {
						0},
				new int[] {
						13},
				new int[] {
						15},
				new int[] {
						9},
				new int[] {
						10}};
		
		// AT, BANG
		static int[][] @__ts_items_24 = new int[][] {
				new int[] {
						2},
				new int[] {
						3}};
		
		// AT, BANG, DOT
		static int[][] @__ts_items_25 = new int[][] {
				new int[] {
						2},
				new int[] {
						3},
				new int[] {
						6}};
		
		// COLON, NICKNAME, OTHERS, SHORTNAME, SPECIALS, WORD
		static int[][] @__ts_items_26 = new int[][] {
				new int[] {
						1},
				new int[] {
						12},
				new int[] {
						16},
				new int[] {
						11},
				new int[] {
						13},
				new int[] {
						10}};
		
		public IrcMsgParser(IStream sr) : 
				base(sr)
		{
		}
		
		public override Tokenizer CreateTokenizer(IStream sr)
		{
			return new IrcMsgTokens(sr);
		}
		
		public override void BeginParse()
		{
			Messages();
		}
		
		// ------------------------------------ Command ------------------------------------
		private void Command()
		{
			if (NextToken(@__ts_items_1))
			{
				_currentMessage.Command = ReadNextToken(@__ts_items_1);
			}
			else
			{
				if (NextToken(@__ts_items_2))
				{
					_currentMessage.Command = ReadNextToken(@__ts_items_2);
				}
				else
				{
					throw ParseError("Expecting one of: WORD;THREEDIGITS");
				}
			}
		}
		
		// ------------------------------------- Host --------------------------------------
		private string Host()
		{
			String hostName = "" ;
			String part = "" ;

			hostName = this.ShortName();
			if (NextToken(@__ts_items_3))
			{
				ReadNextToken(@__ts_items_3);
				hostName += "." ;

				if (NextToken(@__ts_items_4))
				{
					part = this.Host();
					hostName += part ;

				}
			}
			if (NextToken(@__ts_items_5))
			{
				this.Path();
			}
			return hostName;
		}
		
		// ------------------------------------ Message ------------------------------------
		private void Message()
		{
			_currentMessage = new Message() ;

			if (NextToken(@__ts_items_6))
			{
				ReadNextToken(@__ts_items_6);
				this.Prefix();
				ReadNextToken(@__ts_items_7);
			}
			this.Command();
			if (NextToken(@__ts_items_7))
			{
				this.Params();
			}
			ReadNextToken(@__ts_items_8);
			_messages.Add( _currentMessage ) ;
			FireMessageRecieved() ;

			ReadNextToken(@__ts_items_9);
		}
		
		// ----------------------------------- Messages ------------------------------------
		private void Messages()
		{
			this.Message();
			for (
			; NextToken(@__ts_items_10); 
			)
			{
				this.Message();
			}
			if ((EofToken() != true))
			{
				throw ParseError("Expecting end of file");
			}
		}
		
		// ------------------------------------ Middle -------------------------------------
		private string Middle()
		{
			String text = "" ;
			String part = "" ;

			text = this.Middle_Text();
			for (
			; NextToken(@__ts_items_11); 
			)
			{
				if (NextToken(@__ts_items_12))
				{
					part = this.Middle_Text();
				}
				else
				{
					if (NextToken(@__ts_items_6))
					{
						part = ReadNextToken(@__ts_items_6);
					}
					else
					{
						throw ParseError("Expecting one of: COLON;CONTROLS;THREEDIGITS;BANG;EXTRAS;WORD;DIGITS;DOT;OTHERS;S" +
								"YMBOLS;SLASH;NICKNAME;SPECIALS;SHORTNAME;AT");
					}
				}
				text += part ;

			}
			return text;
		}
		
		// ---------------------------------- Middle_Text ----------------------------------
		private string Middle_Text()
		{
			String text = "" ;

			if (NextToken(@__ts_items_1))
			{
				text = ReadNextToken(@__ts_items_1);
			}
			else
			{
				if (NextToken(@__ts_items_13))
				{
					text = ReadNextToken(@__ts_items_13);
				}
				else
				{
					if (NextToken(@__ts_items_2))
					{
						text = ReadNextToken(@__ts_items_2);
					}
					else
					{
						if (NextToken(@__ts_items_14))
						{
							text = ReadNextToken(@__ts_items_14);
						}
						else
						{
							if (NextToken(@__ts_items_15))
							{
								text = ReadNextToken(@__ts_items_15);
							}
							else
							{
								if (NextToken(@__ts_items_16))
								{
									text = ReadNextToken(@__ts_items_16);
								}
								else
								{
									if (NextToken(@__ts_items_17))
									{
										text = ReadNextToken(@__ts_items_17);
									}
									else
									{
										if (NextToken(@__ts_items_18))
										{
											text = ReadNextToken(@__ts_items_18);
										}
										else
										{
											if (NextToken(@__ts_items_3))
											{
												text = ReadNextToken(@__ts_items_3);
											}
											else
											{
												if (NextToken(@__ts_items_19))
												{
													text = ReadNextToken(@__ts_items_19);
												}
												else
												{
													if (NextToken(@__ts_items_20))
													{
														text = ReadNextToken(@__ts_items_20);
													}
													else
													{
														if (NextToken(@__ts_items_21))
														{
															text = ReadNextToken(@__ts_items_21);
														}
														else
														{
															if (NextToken(@__ts_items_22))
															{
																text = ReadNextToken(@__ts_items_22);
															}
															else
															{
																if (NextToken(@__ts_items_5))
																{
																	text = ReadNextToken(@__ts_items_5);
																}
																else
																{
																	throw ParseError("Expecting one of: CONTROLS;THREEDIGITS;BANG;EXTRAS;WORD;DIGITS;DOT;OTHERS;SYMBOLS" +
																			";SLASH;NICKNAME;SPECIALS;SHORTNAME;AT");
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			return text;
		}
		
		// ----------------------------------- NickName ------------------------------------
		private string NickName()
		{
			string nick = String.Empty ;

			nick = ReadNextToken(@__ts_items_15);
			return nick;
		}
		
		// --------------------------------- NickName_Info ---------------------------------
		private void NickName_Info(string nick)
		{
			if (NextToken(@__ts_items_22))
			{
				ReadNextToken(@__ts_items_22);
				_currentMessage.User = this.User();
			}
			ReadNextToken(@__ts_items_21);
			_currentMessage.Host = this.Host();
		}
		
		// ------------------------------------ Params -------------------------------------
		private void Params()
		{
			String text = "" ;

			ReadNextToken(@__ts_items_7);
			if (NextToken(@__ts_items_12))
			{
				text = this.Middle();
					_currentMessage.Params.Add( text ) ;

				if (NextToken(@__ts_items_7))
				{
					this.Params();
				}
			}
			else
			{
				if (NextToken(@__ts_items_6))
				{
					ReadNextToken(@__ts_items_6);
					if (NextToken(@__ts_items_23))
					{
						text = this.Trailer();
						_currentMessage.Params.Add( text ) ;

					}
				}
				else
				{
					throw ParseError("Expecting one of: COLON;CONTROLS;THREEDIGITS;BANG;EXTRAS;WORD;DIGITS;DOT;OTHERS;S" +
							"YMBOLS;SLASH;NICKNAME;SPECIALS;SHORTNAME;AT");
				}
			}
		}
		
		// ------------------------------------- Path --------------------------------------
		private void Path()
		{
			ReadNextToken(@__ts_items_5);
			this.Path_Text();
			for (
			; NextToken(@__ts_items_5); 
			)
			{
				ReadNextToken(@__ts_items_5);
				this.Path_Text();
			}
		}
		
		// ----------------------------------- Path_Text -----------------------------------
		private void Path_Text()
		{
			if (NextToken(@__ts_items_4))
			{
				this.ShortName();
			}
			else
			{
				if (NextToken(@__ts_items_15))
				{
					this.NickName();
				}
				else
				{
					throw ParseError("Expecting one of: WORD;NICKNAME;SHORTNAME");
				}
			}
		}
		
		// ------------------------------------ Prefix -------------------------------------
		private void Prefix()
		{
			if (NextToken(@__ts_items_4))
			{
				this.ServerName_Or_NickName();
			}
			else
			{
				if (NextToken(@__ts_items_15))
				{
					_currentMessage.NickName = this.NickName();
					if (NextToken(@__ts_items_24))
					{
						this.NickName_Info(_currentMessage.NickName);
					}
				}
				else
				{
					throw ParseError("Expecting one of: WORD;NICKNAME;SHORTNAME");
				}
			}
		}
		
		// ---------------------------- ServerName_Or_NickName -----------------------------
		private void ServerName_Or_NickName()
		{
			System.String aName = String.Empty ;
			System.String aPart = String.Empty ;

			aName = this.ShortName();
			if (NextToken(@__ts_items_25))
			{
				if (NextToken(@__ts_items_3))
				{
					ReadNextToken(@__ts_items_3);
					aPart = this.ShortName();
						aName += "." + aPart ;

					for (
					; NextToken(@__ts_items_3); 
					)
					{
						ReadNextToken(@__ts_items_3);
						aPart = this.ShortName();
						aName += "." + aPart ;

					}
					_currentMessage.ServerName = aName ;

				}
				else
				{
					if (NextToken(@__ts_items_24))
					{
					_currentMessage.NickName = aName ;

						this.NickName_Info(aName);
					}
					else
					{
						throw ParseError("Expecting one of: DOT;AT;BANG");
					}
				}
			}
		}
		
		// ----------------------------------- ShortName -----------------------------------
		private string ShortName()
		{
			String shortName ;

			if (NextToken(@__ts_items_14))
			{
				shortName = ReadNextToken(@__ts_items_14);
			}
			else
			{
				if (NextToken(@__ts_items_1))
				{
					shortName = ReadNextToken(@__ts_items_1);
				}
				else
				{
					throw ParseError("Expecting one of: WORD;SHORTNAME");
				}
			}
			return shortName;
		}
		
		// ------------------------------------ Trailer ------------------------------------
		private string Trailer()
		{
			String text = "" ;
			String part = "" ;

			text = this.Trailer_Text();
			for (
			; NextToken(@__ts_items_23); 
			)
			{
				part = this.Trailer_Text();
				text += part ;

			}
			return text;
		}
		
		// --------------------------------- Trailer_Text ----------------------------------
		private string Trailer_Text()
		{
			String text = "" ;

			if (NextToken(@__ts_items_12))
			{
				text = this.Middle_Text();
			}
			else
			{
				if (NextToken(@__ts_items_7))
				{
					text = ReadNextToken(@__ts_items_7);
				}
				else
				{
					if (NextToken(@__ts_items_6))
					{
						text = ReadNextToken(@__ts_items_6);
					}
					else
					{
						throw ParseError("Expecting one of: COLON;CONTROLS;THREEDIGITS;BANG;EXTRAS;SPACE;WORD;DIGITS;DOT;OT" +
								"HERS;SYMBOLS;SLASH;NICKNAME;SPECIALS;SHORTNAME;AT");
					}
				}
			}
			return text;
		}
		
		// ------------------------------------- User --------------------------------------
		private string User()
		{
			String userName = "" ;
			String parts = "" ;

			userName = this.User_Text();
			for (
			; NextToken(@__ts_items_26); 
			)
			{
				parts = this.User_Text();
				userName += parts ;

			}
			return userName;
		}
		
		// ----------------------------------- User_Text -----------------------------------
		private string User_Text()
		{
			String text ;

			if (NextToken(@__ts_items_6))
			{
				text = ReadNextToken(@__ts_items_6);
			}
			else
			{
				if (NextToken(@__ts_items_1))
				{
					text = ReadNextToken(@__ts_items_1);
				}
				else
				{
					if (NextToken(@__ts_items_14))
					{
						text = ReadNextToken(@__ts_items_14);
					}
					else
					{
						if (NextToken(@__ts_items_15))
						{
							text = ReadNextToken(@__ts_items_15);
						}
						else
						{
							if (NextToken(@__ts_items_16))
							{
								text = ReadNextToken(@__ts_items_16);
							}
							else
							{
								if (NextToken(@__ts_items_19))
								{
									text = ReadNextToken(@__ts_items_19);
								}
								else
								{
									throw ParseError("Expecting one of: SPECIALS;COLON;OTHERS;NICKNAME;SHORTNAME;WORD");
								}
							}
						}
					}
				}
			}
			return text;
		}
	}
}
